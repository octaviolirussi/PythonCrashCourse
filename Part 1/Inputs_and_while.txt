The input() function pauses your program and waits for the user to enter
some text. Once Python receives the user’s input, it assigns that input to a
variable to make it convenient for you to work with.

Each time you use the input() function, you should include a clear, easy-to-
follow prompt that tells the user exactly what kind of information you’re
looking for.

message = input("Tell me something, and I will repeat it back to you: ")
print(message)

Tell me something, and I will repeat it back to you: Hello everyone!
Hello everyone!

When you use the input() function, Python interprets everything the user
enters as a string.

height = input("How tall are you, in inches? ")
height = int(height) --> convert to int

if height >= 48:
    print("\nYou're tall enough to ride!")
else:
    print("\nYou'll be able to ride when you're a little older.")

------------------------------------------------------------------------------------------------------------
While Loops

The for loop takes a collection of items and executes a block of code once
for each item in the collection. In contrast, the while loop runs as long as,
or while, a certain condition is true.

current_number = 1
while current_number <= 5:
    print(current_number)
    current_number += 1


Using break to Exit a Loop:

To exit a while loop immediately without running any remaining code in the
loop, regardless of the results of any conditional test, use the break statement.

prompt = "\nPlease enter the name of a city you have visited:"
prompt += "\n(Enter 'quit' when you are finished.) "
while True:
    city = input(prompt)
    if city == 'quit':
        break
    else:
        print(f"I'd love to go to {city.title()}!")


Using continue in a Loop:

Rather than breaking out of a loop entirely without executing the rest of its
code, you can use the continue statement to return to the beginning of the
loop based on the result of a conditional test.

current_number = 0
while current_number < 10:
    current_number += 1
    if current_number % 2 == 0:
        continue --> the continue statement tells Python to ignore the rest of the loop and return to the beginning.
    print(current_number)

--------------------------------------------------------------------------------------------------------------------------------
Using a while Loop with Lists and Dictionaries:

A for loop is effective for looping through a list, but you shouldn’t modify
a list inside a for loop because Python will have trouble keeping track of the
items in the list. To modify a list as you work through it, use a while loop.


Moving Items from One List to Another:

unconfirmed_users = ['alice', 'brian', 'candace']
confirmed_users = []

while unconfirmed_users: --> runs as long as the list unconfirmed_users is not empty.
    current_user = unconfirmed_users.pop()

    print(f"Verifying user: {current_user.title()}")
    confirmed_users.append(current_user)

print("\nThe following users have been confirmed:")
for confirmed_user in confirmed_users:
    print(confirmed_user.title())


Filling a Dictionary with User Input:

polling_active = True

while polling_active:
    # Prompt for the person's name and response.
    name = input("\nWhat is your name? ")
    response = input("Which mountain would you like to climb someday? ")

    responses[name] = response

    repeat = input("Would you like to let another person respond? (yes/ no) ")
    if repeat == 'no':
        polling_active = False

print("\n--- Poll Results ---")
for name, response in responses.items():
    print(f"{name} would like to climb {response}.")